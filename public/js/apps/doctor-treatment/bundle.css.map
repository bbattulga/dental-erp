{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../../resources/js/doctor-treatment/Finish.svelte",
    "../../../../resources/js/doctor-treatment/Tooth.svelte",
    "../../../../resources/js/doctor-treatment/Treatments.svelte"
  ],
  "sourcesContent": [
    "<Dialog bind:this={dialog} aria-labelledby=\"simple-title\" aria-describedby=\"simple-content\"\n\tstyle=\"z-index: 1050;\">\n    <Title>{dialogTitle}</Title>\n    <Content>\n    \t<table class=\"table table-bordered table-responsive\">\n                    <thead class=\"thead-light\">\n                        <tr>\n                            <td>#</td>\n                            <td>Шүд</td>\n                            <td>Эмчилгээ</td>\n                            <td>Үнэ</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    \t{#each $treatmentHistories as th, i}\n                    \t{#if $treatmentHistories[i].id == null}\n                            <tr>\n                            \t<td>{i+1}</td>\n                            \t<td>{th.tooth_id == 0? 'Бүх шүд': th.tooth_id}</td>\n                            \t<td>{th.treatment.name}</td>\n                            \t<td>\n                            \t\t<div class=\"input-group\">\n\t                            \t\t<input class=\"form-control\"\n\t                            \t\t\tclass:invalid={$treatmentHistories[i].price >0 && ($treatmentHistories[i].price < th.treatment.price) || ($treatmentHistories[i].price>th.treatment.limit)}\n\t                            \t\t\ton:change={()=>handleValidatePrice(th,$treatmentHistories[i].price)}\n\t                            \t\t\tbind:value={$treatmentHistories[i].price}\n\t                            \t\t\trequired=\"{true}\">\n\t                            \t</div>\n                            \t</td>\n                            </tr>\n                        {/if}\n                        {/each}\n                        <tr>\n                        \t<td>Нийт</td>\n                        \t<td colspan={5}>{total}₮</td>\n                        </tr>\n                    </tbody>\n                </table>\n    </Content>\n    <Actions>\n        <Button><Label>болих</Label></Button>\n        <button class=\"btn btn-primary ml-3\" on:click={handleFinish}><Label>Болсон</Label></button>\n    </Actions>\n</Dialog>\n<Snackbar bind:this={resultSnackbar}>\n  <Label>Амжилттай хадгалагдлаа - {lastTotal}₮</Label>\n  <!-- <Actions>\n    <IconButton title=\"Dismiss\">close</IconButton>\n  </Actions> -->\n</Snackbar>\n\n<script>\n    import Dialog, {Title, Content, Actions} from '@smui/dialog';\n    import Snackbar from '@smui/snackbar';\n    import IconButton from '@smui/icon-button';\n    import TreatmentHistoryList from './TreatmentHistoryList.svelte';\n    import Button, {Label} from '@smui/button';\n    import {treatmentHistories} from './stores/store.js';\n    import {addUserTreatment} from '../api/doctor-treatment-api.js';\n    import axios from 'axios';\n\n\n    let resultSnackbar;\n    let total = 0;\n    let lastTotal = 0;\n    $:{\n    \ttotal = 0;\n    \tfor (let i=0; i<$treatmentHistories.length; i++){\n    \t\tif ($treatmentHistories[i].id == null &&\n                $treatmentHistories[i].price)\n    \t\t\ttotal += parseInt($treatmentHistories[i].price);\n    \t}\n    \ttotal = total.toLocaleString();\n    }\n\n    const handleValidatePrice = (treatmentHistory, val) => {\n    \tlet treatment = treatmentHistory.treatment;\n    \tif (val >= treatment.price && (val<=treatment.limit)){\n    \t\ttreatmentHistory.price = val;\n    \t}\n    }\n\n    const handleFinish = () => {\n    \tif (document.getElementsByClassName('invalid').length > 0){\n    \t\talert('Үнэн дүн буруу байна');\n    \t\treturn true;\n    \t}\n        lastTotal = total;\n    \tstoreTreatments().then(response=>{\n    \t\tconsole.log('storeTreatments response');\n    \t\t$treatmentHistories = $treatmentHistories;\n    \t\tdialog.close();\n    \t\tresultSnackbar.open();\n    \t})\n    }\n\n    const storeTreatments = () => {\n\n    \treturn new Promise((resolve, reject)=>{\n    \t\tlet promises = [];\n    \t\tfor (let i=0; i<$treatmentHistories.length; i++){\n    \t\t\tif ($treatmentHistories[i].id){\n    \t\t\t\tcontinue;\n    \t\t\t}\n    \t\t\tlet userTreatment = $treatmentHistories[i];\n    \t\t\tlet promise = addUserTreatment(userTreatment);\n    \t\t\tpromise.then(response=>{\n    \t\t\t\tconsole.log('setting id', $treatmentHistories[i].treatment.name);\n    \t\t\t\t$treatmentHistories[i].id = response;\n    \t\t\t}).catch(err=>{\n    \t\t\t\tconsole.log('error when storing history')\n    \t\t\t\tconsole.log(err);\n    \t\t\t\thandleError($treatmentHistories[i]);\n    \t\t\t})\n    \t\t\tpromises.push(promise);\n    \t\t}\n    \t\t axios.all(promises).then(responses=>{\n    \t\t \tresolve(responses);\n    \t\t });\n    \t});\n    }\n\n    const handleError = (userTreatment) => {\n    \talert(JSON.stringify(userTreatment));\n    }\n    export let dialog;\n    let dialogTitle = 'Үнэн дүнгүүдийг оруулна уу';\n</script>\n\n<style>\n\n\t.invalid{\n\t\tborder: 1px solid red;\n\t}\n</style>",
    "<script>\n\timport {createEventDispatcher} from 'svelte';\n\timport {selectedTooth, selectedTreatment, toothStates} from './stores/store.js';\n\timport {getTreatmentImgSrc} from '../api/doctor-treatment-api.js';\n\timport {selectedTooths} from './stores/store.js';\n\n\texport let toothCode = 11;\n\tconst dispatch = createEventDispatcher();\n\n\tlet active = null;\n\tlet imgSrc = null;\n\tlet lastTreatmentId = null;\n\tlet treatments = null;\n\n\t$: {\n\t\ttreatments = $toothStates[toothCode].treatments;\n\t\tlastTreatmentId = treatments[treatments.length-1]!=null? treatments[treatments.length-1]:null;\n\t\timgSrc = getTreatmentImgSrc(toothCode, lastTreatmentId);\n\t}\n\t$: active = $toothStates[toothCode].active;\n\t\n\tconst handleClick = (event) => {\n\n\t\tlet detail = {\n\t\t\ttoothCode\n\t\t}\n\t\tdispatch('click', detail);\n\t}\n\n</script>\n\n\n<img on:click={handleClick} src={imgSrc}\n\tclass:active\n\tclass:tooth={!active}>\n\n\n<style>\n\t.active{\n\n\t}\n\n\t.disabled{\n\t\topacity: 0.5;\n\t}\n</style>",
    "\n<div class=\"d-flex align-items-center\">\n    <div class=\"search mt-2\" data-search-path=\"Layouts.Search.html?q=\"\n        style=\"margin: 0 auto;\">\n        <input placeholder=\"хайх...\" bind:value={searchVal}>\n        <span class=\"search-icon\">\n            <i class=\"simple-icon-magnifier\"></i>\n        </span>\n    </div>\n</div>\n\n<div id=\"treatmentsContainer\" class=\"card-body\" on:click={onOpen}>\n    {#each treatments as treatment}\n\n    {#if searchVal.length == 0 || isMatch(searchVal, treatment.name)}\n        <button \n        class=\"btn btn-primary btn-block\"\n        on:click={()=>handleClickTreatment(treatment)}\n        \tclass:active={$selectedTreatment && (treatment.id==$selectedTreatment.id)}>\n            <div class=\"row\">\n            \t<div class=\"col-md-12\">\n                    {treatment.name}\n                </div>\n            </div>\n        </button>\n    {/if}\n    {/each}\n</div>\n\n<Dialog\n  bind:this={allToothDialog}\n  aria-labelledby=\"dialog-title\"\n  aria-describedby=\"dialog-content\"\n  style=\"z-index: 1050;\"\n>\n  <Title id=\"dialog-title\">{clickedTreatment? clickedTreatment.name:''}</Title>\n  <Content id=\"dialog-content\">\n    Бүх шүдэнд хийгдэх эмчилгээ байна\n  </Content>\n  <Actions>\n    <Button>\n      <Label>болих</Label>\n    </Button>\n    <Button on:click={handleAddTreatment}>\n      <Label>Үргэлжлүүлэх</Label>\n    </Button>\n  </Actions>\n</Dialog>\n\n\n<script>\nimport List, {Item, Text} from '@smui/list';\nimport {getTreatments} from '../api/doctor-treatment-api.js';\nimport {selectedTreatment} from './stores/store.js';\nimport Dialog, {Title, Content, Actions} from '@smui/dialog';\nimport Button, {Label} from '@smui/button';\nimport {checkin, treatmentHistories} from './stores/store.js';\n\n\nlet allToothDialog;\nlet clickedTreatment;\nlet treatments = [];\ngetTreatments().then(response=>{\n    treatments = response.data;\n}).catch(err=>{\n    console.log('error when fetching treatments');\n    console.log(err);\n    alert('page reload хийнэ үү');\n});\n\nconst handleClickTreatment = (treatment) => {\n    clickedTreatment = treatment;\n    console.log('previous treatment', $selectedTreatment);\n    if ($selectedTreatment == treatment){\n        $selectedTreatment = 0;\n        return;\n    }\n\n    // make sure fora all tooths\n    if (treatment.selection_type == 0){\n        console.log('open all treatment dialog');\n        allToothDialog.open();\n        return;\n    }\n    console.log('selected treatment', treatment);\n    $selectedTreatment = treatment;\n}   \n\nconst handleAddTreatment = () => {\n    let userTreatment = {\n            id: null,\n            checkin_id: $checkin.id,\n            user_id: $checkin.user_id,\n            treatment_id: clickedTreatment.id,\n            treatment: clickedTreatment,\n            treatment_selection_id: 0,\n            treatment_selection: null,\n            tooth_id: 0,\n            price: null,\n            symptom: '',\n            diagnosis: '',\n\n            value: 0,\n            decay_level: 0,\n            tooth_type_id: 0,\n            created_at: new Date().toLocaleDateString('en-CA')\n        }\n\n    $treatmentHistories = [...$treatmentHistories, userTreatment];\n}\n\nlet searchVal = '';\n\nconst isMatch = (keyword, value) => {\n    let regex = new RegExp(keyword, 'i');\n    return regex.exec(value);\n}\nconst onOpen = () => {\n\n}\n</script>\n\n\n<style>\n\t.active{\n\t\tbackground-color: #efefef;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAmIC,uBAAQ,CAAC,AACR,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,GAAG,AACtB,CAAC;AC/FD,sBAAO,CAAC,AAER,CAAC;ACoFD,qBAAO,CAAC,AACP,gBAAgB,CAAE,OAAO,AAC1B,CAAC"
}